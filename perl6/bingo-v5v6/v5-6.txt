#!/usr/bin/env perl						  #!/usr/bin/env perl6

use strict;							  my $game = 0;
use warnings;							  my %draws;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;					  for (5,27,46,55,67), (14,23,32,47,62), (39,45,44,42,35), (69,49,1
								    my %h;
my $game = 0;							    %h{$_} = $_;
my $draws = {};							    $game++;
for ([5,27,46,55,67], [14,23,32,47,62], [39,45,44,42,35], [69,49,   %draws{$game} = %h;
  my $h;							  }
  @$h{@$_} = @$_;
  $game++;							  my %winners;
  $draws ->{$game} = $h;
}								  sub examine($id, %all, %in)
								  {
my $winners;							   my @all = keys %all;

sub examine							   for %draws.keys -> $g {
{								    # IF bingo card has less than 4 numbers from the drawing, no ne
 my $id = $_[0];						    next if (%draws{$g}{@all}.grep({$_.defined}).elems < 4);
 my @all = keys %{$_[1]};					    for %in.kv -> $k, $v {
 my %in = %{$_[2]};						     %winners{$g}.push("{$id}:{$k}") if (%in{$k}.elems == %draws{$g
								    }
 for my $g (keys %$draws) {					   }
  my $draw = $draws->{$g};					  }

  # IF bingo card has less than 4 numbers from the drawing, no ne ### Parse Block
  next if (scalar(grep { defined } @{$draws->{$g}}{@all}) < 4);	  {
								   my $fh = open "bingo.txt", :r;
  for my $k (keys %in) {					   my @t = ();
   push(@{$winners->{$g}}, "${id}:${k}") if (@{$in{$k}} == grep {  my %all = ();
  }								   my ($player, $board);
 }
}								   while (defined my $line = $fh.get) {
								    next if ($line ~~ /^\s*$/);
### Parse Block							    $line = $line.trim;
{								    if ($line ~~ /Player/) {
 open (my $fh, '<', "bingo.txt") or die;			     $player = $line.split(':')[1];
 my $t = [];							     my $tmp = $fh.get;
 my %all = ();							     if ($tmp ~~ /Board/) {
 my ($player, $board);						      $board = $tmp.split(':')[1];
								     }
 while (my $line = <$fh>) {					     my $id = "{$board}:{$player}";
  next if ($line =~ /^\s*$/);
  chomp($line);							     # Examine 5 horizontal, 5 vertical, two diagonals (forward and
  if ($line =~ /Player:\s*(.*)\s*$/) {				     examine($id, %all, {"h1" => @t[0],
   $player = $1;						      "h2" => @t[1],
   my $tmp = <$fh>;						      "h3" => @t[2],
   if ($tmp =~ /Board:\s*(.*)\s*$/) {				      "h4" => @t[3],
    $board = $1;						      "h5" => @t[4],
   }
   my $id = "$board:$player";					      "v1" => [ @t[0][0],@t[1][0],@t[2][0],@t[3][0],@t[4][0] ],
								      "v2" => [ @t[0][1],@t[1][1],@t[2][1],@t[3][1],@t[4][1] ],
   # Examine 5 horizontal, 5 vertical, two diagonals (forward and     "v3" => [ @t[0][2],@t[1][2],@t[3][2],@t[4][2] ],
   examine($id, \%all, {					      "v4" => [ @t[0][3],@t[1][3],@t[2][2],@t[3][3],@t[4][3] ],
    "h1" => $t->[0],						      "v5" => [ @t[0][4],@t[1][4],@t[2][3],@t[3][4],@t[4][4] ],
    "h2" => $t->[1],
    "h3" => $t->[2],						      "df" => [ @t[0][0],@t[1][1],@t[3][3],@t[4][4] ],
    "h4" => $t->[3],						      "db" => [ @t[0][4],@t[1][3],@t[3][1],@t[4][0] ]});
    "h5" => $t->[4],
								     @t = ();
    "v1" => [ $t->[0][0],$t->[1][0],$t->[2][0],$t->[3][0],$t->[4]    %all = ();
    "v2" => [ $t->[0][1],$t->[1][1],$t->[2][1],$t->[3][1],$t->[4]   } else {
    "v3" => [ $t->[0][2],$t->[1][2],$t->[3][2],$t->[4][2] ],	     my @a = $line.split(' ').grep(/\d/);
    "v4" => [ $t->[0][3],$t->[1][3],$t->[2][2],$t->[3][3],$t->[4]    push(@t, [@a]);
    "v5" => [ $t->[0][4],$t->[1][4],$t->[2][3],$t->[3][4],$t->[4]    %all{@a} = @a; # Keep track of all numbers on a bingo card,
										    # Helps in eliminating examning each of 12 rows
    "df" => [ $t->[0][0],$t->[1][1],$t->[3][3],$t->[4][4] ],	    }
    "db" => [ $t->[0][4],$t->[1][3],$t->[3][1],$t->[4][0] ]	   }
   });								   $fh.close;
								  }
   $t = [];
   %all = ();							  %winners.say;
  } else {
   my @a = grep { /\d/ } split(' ', $line);
   push(@$t, [@a]);
   @all{@a} = 1; # Keep track of all numbers on a bingo card,
		 # Helps in eliminating examning each of 12 rows
  }
 }
 close($fh);
}
print Data::Dumper->Dump([$winners], ['Winners']);
