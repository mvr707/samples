#!/usr/bin/env perl						  #!/usr/bin/env perl6
								  
use strict;							  my $game = 0;
use warnings;							  my %draws;
use Data::Dumper;						  
$Data::Dumper::Sortkeys = 1;					  for (5,27,46,55,67), (14,23,32,47,62), (39,45,44,42,35), (69,49,1
								    my %h;
my $game = 0;							    %h{$_} = $_;
my $draws = {};							    $game++;
for ([5,27,46,55,67], [14,23,32,47,62], [39,45,44,42,35], [69,49,   %draws{$game} = %h;
  my $h;							  }
  @$h{@$_} = @$_;						  
  $game++;							  my %winners;
  $draws->{$game} = $h;						  
}								  ### Parse Block
								  {
my $winners;							   my @lines = 'bingo.txt'.IO.lines;
								   my @t = ();
### Parse Block							   my ($player, $board);
{								  
 my @lines = split("\n", do { local(@ARGV, $/) = "bingo.txt"; <>   my $index = 0;
 my $t = [];							   my $line_count = @lines.elems;
 my ($player, $board);						  
								   while ($index < $line_count) {
 my $index = 0;							    my $line = @lines[$index++];
 my $lines_count = @lines;					    next if ($line ~~ /^\s*$/);
 while ($index < $lines_count) {				    $line = $line.trim;
  my $line = $lines[$index++];					    if ($line ~~ /Player/) {
  next if ($line =~ /^\s*$/);					     $player = $line.split(':')[1];
  chomp($line);							     my $tmp = @lines[$index++];
  if ($line =~ /Player:\s*(.*)\s*$/) {				     if ($tmp ~~ /Board/) {
   $player = $1;						      $board = $tmp.split(':')[1];
   my $tmp = $lines[$index++];					     }
   if ($tmp =~ /Board:\s*(.*)\s*$/) {				     my $id = "{$board}:{$player}";
    $board = $1;						  
   }								     # Need to examine 5 horizontal, 5 vertical, two diagonals (for
   my $id = "$board:$player";					     my %in = (
								      "h1" => @t[0],
   # Examine 5 horizontal, 5 vertical, two diagonals (forward and     "h2" => @t[1],
   my %in = (							      "h3" => @t[2][0,1,3,4],
    "h1" => $t->[0],						      "h4" => @t[3],
    "h2" => $t->[1],						      "h5" => @t[4],
    "h3" => [@{$t->[2]}[0,1,3,4]],				  
    "h4" => $t->[3],						      "v1" => (@t[0][0],@t[1][0],@t[2][0],@t[3][0],@t[4][0]),
    "h5" => $t->[4],						      "v2" => (@t[0][1],@t[1][1],@t[2][1],@t[3][1],@t[4][1]),
								      "v3" => (@t[0][2],@t[1][2],@t[3][2],@t[4][2]),
    "v1" => [ $t->[0][0],$t->[1][0],$t->[2][0],$t->[3][0],$t->[4]     "v4" => (@t[0][3],@t[1][3],@t[2][2],@t[3][3],@t[4][3]),
    "v2" => [ $t->[0][1],$t->[1][1],$t->[2][1],$t->[3][1],$t->[4]     "v5" => (@t[0][4],@t[1][4],@t[2][3],@t[3][4],@t[4][4]),
    "v3" => [ $t->[0][2],$t->[1][2],$t->[3][2],$t->[4][2] ],	  
    "v4" => [ $t->[0][3],$t->[1][3],$t->[2][2],$t->[3][3],$t->[4]     "df" => (@t[0][0],@t[1][1],@t[3][3],@t[4][4]),
    "v5" => [ $t->[0][4],$t->[1][4],$t->[2][3],$t->[3][4],$t->[4]     "db" => (@t[0][4],@t[1][3],@t[3][1],@t[4][0]),
								     );
    "df" => [ $t->[0][0],$t->[1][1],$t->[3][3],$t->[4][4] ],	  
    "db" => [ $t->[0][4],$t->[1][3],$t->[3][1],$t->[4][0] ],	     # Keep track of all numbers on a bingo card, helps in eliminat
   );								     my @all = (|@t[0], |@t[1], |@t[2][0,1,3,4], |@t[3], |@t[4]);
								  
   # Keep track of all numbers on a bingo card, helps in eliminat    for %draws.keys -> $g {
   my @all = (@{$t->[0]}, @{$t->[1]}, @{$t->[2]}[0,1,3,4], @{$t->      # IF bingo card has less than 4 numbers from the drawing, no
								       if %draws{$g}{@all}.grep({$_.defined}).elems >= 4 {
   for my $g (keys %$draws) {					  	for %in.kv -> $k, $v {
    my $draw = $draws->{$g};					  	 %winners{$g}.push("{$id}:{$k}") if (%in{$k}.elems == %draw
    # IF bingo card has less than 4 numbers from the drawing, no  	}
    if (scalar(grep { defined } @{$draws->{$g}}{@all}) >= 4) {	       }
     for my $k (keys %in) {					      }
      push(@{$winners->{$g}}, "${id}:${k}") if (@{$in{$k}} == gre    @t = ();
     }								    } else {
    }								     @t.push([$line.split(' ')]);
   }								    }
								   }
   $t = [];							  }
  } else {							  
   push(@$t, [ split(' ', $line) ]);				  %winners.say;
  }								  
 }								  
}								  
								  
print Data::Dumper->Dump([$winners], ['Winners']);		  
