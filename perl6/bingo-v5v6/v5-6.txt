#!/usr/bin/env perl						  #!/usr/bin/env perl6
								  
use strict;							  my $game = 0;
use warnings;							  my %draws;
use Data::Dumper;						  
$Data::Dumper::Sortkeys = 1;					  for (5,27,46,55,67), (14,23,32,47,62), (39,45,44,42,35), (69,49,1
								    my %h;
my $game = 0;							    %h{$_} = $_;
my $draws = {};							    $game++;
for ([5,27,46,55,67], [14,23,32,47,62], [39,45,44,42,35], [69,49,   %draws{$game} = %h;
  my $h;							  }
  @$h{@$_} = @$_;						  
  $game++;							  my %winners;
  $draws ->{$game} = $h;					  
}								  sub examine(%in)
								  {
my $winners;							   for %in.kv -> $id, $bingo {
								    # %draws.keys.map({ %winners{$_}.push($id) if ($bingo.elems ==
sub examine							  
{								    for %draws.keys -> $g {
 my %in = @_;							     if ($bingo.elems == %draws{$g}{@($bingo)}.grep({$_.defined}).e
 while (my ($k, $v) = each %in) {				      %winners{$g}.push($id);
  my @bingo = @$v;						     }
  map { push(@{$winners->{$_}}, $k) if (@bingo == grep { defined    }
 }								   }
}								  }
								  
### Parse Block							  ### Parse Block
{								  {
 open (my $fh, '<', "bingo.txt") or die;			   my $fh = open "bingo.txt", :r;
 my $t = [];							   my @t = ();
 my ($player, $board);						   my ($player, $board);
								  
 while (my $line = <$fh>) {					   while (defined my $line = $fh.get) {
  next if ($line =~ /^\s*$/);					    next if ($line ~~ /^\s*$/);
  chomp($line);							    $line = $line.trim;
  if ($line =~ /Player:\s*(.*)\s*$/) {				    if ($line ~~ /Player/) {
   $player = $1;						     $player = $line.split(':')[1];
   my $tmp = <$fh>;						     my $tmp = $fh.get;
   if ($tmp =~ /Board:\s*(.*)\s*$/) {				     if ($tmp ~~ /Board/) {
    $board = $1;						      $board = $tmp.split(':')[1];
   }								     }
   my $id = "$board:$player";					     my $id = "{$board}:{$player}";
								  
   examine("${id}:h1" => $t->[0],				     examine({"{$id}:h1" => @t[0],
    "${id}:h2" => $t->[1],					      "{$id}:h2" => @t[1],
    "${id}:h3" => $t->[2],					      "{$id}:h3" => @t[2],
    "${id}:h4" => $t->[3],					      "{$id}:h4" => @t[3],
    "${id}:h5" => $t->[4],					      "{$id}:h5" => @t[4],
								  
    "${id}:v1" => [ $t->[0][0],$t->[1][0],$t->[2][0],$t->[3][0],$     "{$id}:v1" => [ @t[0][0],@t[1][0],@t[2][0],@t[3][0],@t[4][0]
    "${id}:v2" => [ $t->[0][1],$t->[1][1],$t->[2][1],$t->[3][1],$     "{$id}:v2" => [ @t[0][1],@t[1][1],@t[2][1],@t[3][1],@t[4][1]
    "${id}:v3" => [ $t->[0][2],$t->[1][2],$t->[3][2],$t->[4][2] ]     "{$id}:v3" => [ @t[0][2],@t[1][2],@t[3][2],@t[4][2] ],
    "${id}:v4" => [ $t->[0][3],$t->[1][3],$t->[2][2],$t->[3][3],$     "{$id}:v4" => [ @t[0][3],@t[1][3],@t[2][2],@t[3][3],@t[4][3]
    "${id}:v5" => [ $t->[0][4],$t->[1][4],$t->[2][3],$t->[3][4],$     "{$id}:v5" => [ @t[0][4],@t[1][4],@t[2][3],@t[3][4],@t[4][4]
								  
    "${id}:df" => [ $t->[0][0],$t->[1][1],$t->[3][3],$t->[4][4] ]     "{$id}:df" => [ @t[0][0],@t[1][1],@t[3][3],@t[4][4] ],
    "${id}:db" => [ $t->[0][4],$t->[1][3],$t->[3][1],$t->[4][0] ]     "{$id}:db" => [ @t[0][4],@t[1][3],@t[3][1],@t[4][0] ]});
								  
   $t = [];							     @t = ();
  } else {							    } else {
   push(@$t, [grep { /\d/ } split(' ', $line)]);		     push(@t, [$line.split(' ').grep(/\d/)]);
  }								    }
 }								   }
 close($fh);							   $fh.close;
}								  }
								  
print Data::Dumper->Dump([$winners], ['Winners']);		  %winners.say;
